// FFmpegUtil.c

#include <libavcodec/avcodec.h>
#include <libavformat/avformat.h>
#include <libswscale/swscale.h>
#include <libavutil/pixfmt.h>

#include <stdio.h>
#include <pthread.h>

#include <jni.h>

#define LOG_TAG "android-ffmpeg-FFmpegUtil"
#define LOGI(...) __android_log_print(4, LOG_TAG, __VA_ARGS__);
#define LOGE(...) __android_log_print(6, LOG_TAG, __VA_ARGS__);
#define	NUM_ARRAY_ELEMENTS(p)		((int) sizeof(p) / sizeof(p[0]))

#define INBUF_SIZE 4096
#define AUDIO_INBUF_SIZE 20480

jint mp32pcm(JNIEnv *env, jobject pObj,jbyteArray mp3Arr, jbyteArray pcmArr) {
	// Register all formats and codecs
	av_register_all();

	jboolean b;
	int i,nSize;

	jbyte* arrSrc=(*env)->GetByteArrayElements(env,mp3Arr,&b);
	jbyte* arrDst=(*env)->GetByteArrayElements(env,pcmArr,&b);
	nSize = (*env)->GetArrayLength(env,mp3Arr);

	LOGI("src nSize:%d",nSize);

	for(i=0; i<nSize; ++i) {
		arrDst[i] = arrSrc[i];
	}

	//pcmをogg等に変換する
	AVCodec *codec;
	AVCodecContext *c= NULL;
	AVFrame *decodedFrame = NULL;

	AVPacket avpkt;
	av_init_packet(&avpkt);
	avpkt.data = arrSrc;
	avpkt.size = nSize;

	codec = avcodec_find_decoder(AV_CODEC_ID_MP3);//AV_CODEC_ID_MP3
	if(!codec){
		LOGI("codec not found");
		return -1;
	}

	c = avcodec_alloc_context3(codec);
	if(avcodec_open2(c, codec, NULL)<0){
		LOGI("could not open codec");
		return -1;
	}

	if(!(decodedFrame = av_frame_alloc())) {
		LOGI("Could not allocate audio frame");
		return -1;
	}
	av_frame_unref(decodedFrame);
	int gotFrame = -1;
	int consumedBytes = avcodec_decode_audio4(c, decodedFrame, &gotFrame, &avpkt);
	if(consumedBytes < 0) {
		LOGI("Error while decoding %d",consumedBytes);
		return -1;
	}

	LOGI("gotFrame:%d consumedBytes:%d",gotFrame,consumedBytes);
	LOGI("decodedFrame data:%d linesize:%d",decodedFrame->data[0], decodedFrame->linesize[0]);

	avcodec_close(c);
	av_free(c);

	(*env)->ReleaseByteArrayElements(env, mp3Arr, arrSrc, 0);
	(*env)->ReleaseByteArrayElements(env, pcmArr, arrDst, 0);

	return 0;
}


jint JNI_OnLoad(JavaVM* pVm, void* reserved) {
	JNIEnv* env;
	if ((*pVm)->GetEnv(pVm, (void **)&env, JNI_VERSION_1_6) != JNI_OK) {
		 return -1;
	}

	JNINativeMethod nm[1];
	nm[0].name = "mp32pcm";
	nm[0].signature = "([B[B)I";
	nm[0].fnPtr = (void*)mp32pcm;

	jclass cls = (*env)->FindClass(env, "jp/tf_web/fukuon/FFmpegUtil");
	//Register methods with env->RegisterNatives.
	(*env)->RegisterNatives(env, cls, nm, NUM_ARRAY_ELEMENTS(nm));
	return JNI_VERSION_1_6;
}

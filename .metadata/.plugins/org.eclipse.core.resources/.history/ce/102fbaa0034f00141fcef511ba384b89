package jp.tf_web.fukuonsample.net_audio;

import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.SocketException;

import android.media.AudioFormat;
import android.media.AudioRecord;
import android.media.MediaRecorder;
import android.util.Log;

/**　録音データをUDPで送信
 * 
 * @author furukawanobuyuki
 *
 */
public class SendAudioRunnable implements Runnable {
	private static final String LOG_TAG = "SendAudioRunnable";
	private DatagramSocket sock;

	private AudioRecord audioRec = null;
	private int bufSize;
	private boolean isRecording = false;
	
	public SendAudioRunnable(int port) {
		try {
			// バッファサイズの計算
			bufSize = AudioRecord.getMinBufferSize(AudioConfig.SAMPLE_RATE,
					AudioFormat.CHANNEL_OUT_MONO,
					AudioFormat.ENCODING_PCM_16BIT) * 2;

			// AudioRecordの作成
			audioRec = new AudioRecord(MediaRecorder.AudioSource.MIC,
					AudioConfig.SAMPLE_RATE, AudioFormat.CHANNEL_OUT_MONO,
					AudioFormat.ENCODING_PCM_16BIT, bufSize);

			this.sock = new DatagramSocket(port);
		} catch (SocketException se) {
			Log.e(LOG_TAG, "SocketException: " + se.toString());
		} catch (IOException ie) {
			Log.e(LOG_TAG, "IOException" + ie.toString());
		}
	}

	@Override
	public void run() {
		audioRec.startRecording();
		isRecording = true;
		byte[] buf = new byte[bufSize];
		while (isRecording) {
			// 録音データを取得
			audioRec.read(buf, 0, buf.length);
			try {
				//UDPで送信
				DatagramPacket pack = new DatagramPacket(buf, buf.length);
				this.sock.receive(pack);
				Log.d(LOG_TAG, "recv pack: " + pack.getLength());
				// 一回で送信するデータ量
				Thread.sleep(AudioConfig.SAMPLE_INTERVAL, 0);
			} catch (IOException e) {
				e.printStackTrace();
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

		}
		audioRec.stop();
	}

	public void stopRecording() {
		isRecording = false;
	}
}
